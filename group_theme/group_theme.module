<?php
// $Id:$

/**
 * @file
 * Associate theme to a group.
 */

/**
 * Group register field.
 */
define('GROUP_THEME_FIELD', 'group_theme');

/**
 * Implement hook_field_formatter_info().
 */
function group_theme_field_formatter_info() {
  return array(
    'group_theme_default' => array(
      'label' => t('Group theme'),
      'field types' => array('list_text'),
    ),
  );
}

/**
 * Implement group_fields_info().
 */
function group_theme_group_fields_info() {
  $items[GROUP_THEME_FIELD] = array(
    'type' => array('group'),
    'description' => t('Associate theme to a group.'),
    'field' => array(
      'field_name' => GROUP_THEME_FIELD,
      'type' => 'list_text',
      'cardinality' => 1,
      'settings' => array('allowed_values' => '', 'allowed_values_function' => 'group_theme_field_allowed_values'),
    ),
    'instance' => array(
      'label' => t('Groups views'),
      'widget_type' => 'options_select',
      'display' => array(
        'full' => array(
          'label' => 'above',
          'type' => 'group_theme_default',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'group_theme_default',
        ),
      ),
    ),
  );

  return $items;
}

/**
 * Implements hook_custom_theme().
 *
 * Change the theme, based on a group context.
 */
function group_theme_custom_theme() {
  if ($group = group_context()) {
    // Load the entity.
    $entity = group_load_entity_from_group($group->gid);

    // Check if a theme field exists, and it isn't defined as "default"
    // (i.e. use the default site theme).
    if (!empty($entity->{GROUP_THEME_FIELD}[LANGUAGE_NONE][0]['value']) && $entity->{GROUP_THEME_FIELD}[LANGUAGE_NONE][0]['value'] != '__default') {
      return $entity->{GROUP_THEME_FIELD}[LANGUAGE_NONE][0]['value'];
    }
  }
}


/**
 * Return all enabled themes.
 */
function group_theme_field_allowed_values() {
  $return = array('__default' => t('Use site-wide theme definition'));

  $themes = list_themes();
  uasort($themes, 'system_sort_modules_by_info_name');

  foreach ($themes as $key => $value) {
    if ($value->status) {
      $return[$key] = check_plain($value->info['name']);
    }
  }

  return $return;
}

