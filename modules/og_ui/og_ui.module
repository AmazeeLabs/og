<?php
// $Id$

/**
 * @file
 * Allow users to subscribe and manage their subscriptions to groups.
 */

// Load all Field module hooks for organic groups.
require(drupal_get_path('module', 'og_ui') . '/og_ui.field.inc');

// Selective groups states. chosen by the group admin
define ('OG_OPEN', 'open');
define ('OG_MODERATED', 'moderated');
define ('OG_INVITE_ONLY', 'invite');
define ('OG_CLOSED', 'closed');

// site admin chooses in og_settings() whether group creator can put his group on the registration form
define('OG_REGISTRATION_NEVER', 0);
define('OG_REGISTRATION_ALWAYS', 1);
define('OG_REGISTRATION_CHOOSE_TRUE', 2);
define('OG_REGISTRATION_CHOOSE_FALSE', 3);

// site admin chooses in og_settings() whether group creator can put his group in the Groups directory
define('OG_DIRECTORY_NEVER', 0);
define('OG_DIRECTORY_ALWAYS', 1);
define('OG_DIRECTORY_CHOOSE_TRUE', 2);
define('OG_DIRECTORY_CHOOSE_FALSE', 3);

// Dispositioning of nodes and memberships after deletion of a group node.
define('OG_DELETE_NOTHING', 0);
define('OG_DELETE_ORPHANS', 1);
define('OG_DELETE_MOVE_NODES', 2);
define('OG_DELETE_MOVE_NODES_MEMBERSHIPS', 3);

define('OG_STATE_ACTIVE', 'active');
define('OG_STATE_PENDING', 'pending');

/*******************************************************************************
 * Hook implementations
 ******************************************************************************/


/**
 * Implement hook_menu().
 */
function og_ui_menu() {
  // Anonymous users should be able to get to the join page.
  $items['og/subscribe/%node'] = array(
    'type' => MENU_CALLBACK,
    'file' => 'og_ui.pages.inc',
    'page callback' => 'og_subscribe',
    'page arguments' => array(2),
    'access callback' => 'node_access',
    'access arguments' => array('view', 2),
    'title' => 'Join group'
  );

  $items['og/opml'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'og_opml',
    'access callback' => 'user_is_logged_in',
    'title' => 'OPML',
  );
  $items['og/unsubscribe/%node/%user'] = array(
    'type' => MENU_CALLBACK,
    'file' => 'og.pages.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_confirm_unsubscribe', 2, 3),
    'access callback' => 'og_menu_access_unsubscribe',
    'access arguments' => array(2, 3),
    'title' => 'Leave group',
  );

  $items['og/approve/%node/%user/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'og_approve',
    'page arguments' => array(2, 3, 4),
    'access callback' => 'og_is_group_admin',
    'access arguments' => array(2),
    'title' => 'Approve membership request'
  );
  $items['og/deny/%node/%user/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'og_deny',
    'page arguments' => array(2, 3, 4),
    'access callback' => 'og_is_group_admin',
    'access arguments' => array(2),
    'title' => 'Deny membership request',
  );
  $items['og/create_admin/%node/%user'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_create_admin_confirm', 2, 3),
    'access callback' => 'og_is_group_admin',
    'access arguments' => array(2),
    'title' => 'Create group administrator',
    'file' => 'og.pages.inc',
  );
  $items['og/delete_admin/%node/%user'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_remove_admin_confirm', 2, 3),
    'access callback' => 'og_is_group_admin',
    'access arguments' => array(2),
    'title' => 'Delete group administrator',
    'file' => 'og.pages.inc',
  );

  // members only and group may not be invite-only or closed
  $items['og/invite/%node'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_invite_form', 2),
    'access callback' => 'og_menu_access_invite',
    'access arguments' => array(2),
    'title' => 'Send invitation',
    'type' => MENU_CALLBACK,
    'file' => 'og.pages.inc',
  );
  $items["og/manage/%node"] = array(
    'page callback' => 'og_manage',
    'page arguments' => array(2),
    'access callback' => 'og_is_group_member',
    'access arguments' => array(2, FALSE),
    'title' => 'Manage membership',
    'type' => MENU_CALLBACK,
    'file' => 'og.pages.inc',
  );

  $items['admin/og'] = array(
    'title' => 'Organic groups',
    'description' => 'Administer the suite of Organic groups modules.',
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/og/og'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_ui_admin_settings'),
    'title' => 'Organic groups configuration',
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure organic groups module.',
    'file' => 'og_ui.admin.inc',
    'file path' => drupal_get_path('module', 'og_ui'),
    'weight' => -5,
  );

  // group admin only
  $items['og/users/%node/add_user'] = array(
    'page callback' => 'drupal_get_form',
    'title' => 'Add members',
    'page arguments' => array('og_add_users', 2),
    'type' => MENU_LOCAL_TASK,
    'file' => 'og.pages.inc',
    'weight' => 5,
    'access callback' => 'og_is_group_admin',
    'access arguments' => array(2),
  );

    // Broadcast tab on group node.
  $items['node/%node/broadcast'] = array(
    'title' => 'Broadcast',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_broadcast_form', 1),
    'access callback' => 'og_broadcast_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'og.pages.inc',
    'weight' => 7
  );

  return $items;
}

/**
 * Implement hook_init().
 */
function og_ui_init() {
  if ($group_node = og_ui_determine_context()) {
    og_ui_set_context($group_node);
  }
}

/**
 * Implement hook_form_FORM_ID_alter().
 */
function og_form_node_type_form_alter(&$form, &$form_state) {
  // Built in content types do not allow changes to type machine name.
  if (isset($form['identity']['type']['#default_value'])) {
    $usage = variable_get('og_content_type_usage_'. $form['identity']['type']['#default_value'], 'omitted');
  }
  else {
    $usage = variable_get('og_content_type_usage_'. $form['identity']['type']['#value'], 'omitted');
  }
  $options = array();
  foreach (og_get_og_types() as $type => $value) {
    $options[$type] = $value['description'];
  }

  $form['og'] = array(
    '#type' => 'fieldset',
    '#title' => t('Organic groups'),
    '#collapsible' => TRUE,
    '#group' => 'additional_settings',
    '#access' => user_access('administer organic groups'),
  );

  $form['og']['og_content_type_usage'] = array(
    '#type' => 'radios',
    '#title' => t('Organic groups usage'),
    '#default_value' => $usage,
    '#options' => $options,
    '#description' => t('Specify how organic groups should treat nodes of this type. Nodes may behave as a group, as group posts, or may not participate in organic groups at all.'),
  );
}

/**
* Implement hook_node_type_delete().
*/
function og_ui_node_type_delete($info) {
  variable_del('og_content_type_usage_' . $info->type);
}

/**
* Implement hook_node_type_insert().
*/
function og_ui_node_type_insert($info) {
  og_ui_group_type_set_fields(array($info->type));
}

/**
* Implement hook_node_delete().
*/
function og_ui_node_insert($node) {
  if (og_is_group_type($node->type)) {
    // Add group.
    // TODO: Get default settings.
    og_set_group($node->nid);
    // Associate the node author with the group.
    og_set_association($node->nid, $node->uid, 'user');
  }
}

/**
* Implement hook_node_delete().
*/
function og_ui_node_delete($node) {
  if (og_is_group_type($node->type)) {
    // Remove group.
    og_delete_group($node->nid);
  }
}

/**
 * Implement hook_og_get_group_alter().
 */
function og_ui_og_set_group_alter($group) {
  // Add basic permissions and roles.
  $group->data += array(
    'permissions' => array(
      'approve and deny subscription' => array(
        'title' => t('Approve and deny subscription'),
        'description' => t("Allow user to allow or deny another user's subscription request."),
        'roles' => array('administrator'),
      ),
    ),
    'roles' => array(
      'administrator' => t('Group administrator'),
    ),
  );
}

/**
 * Implement hook_og_group_selective_info().
 */
function og_ui_og_group_selective_info() {
  return array(
    OG_OPEN => t('Open'),
    OG_MODERATED => t('Moderated'),
    OG_MODERATED => t('Invite only'),
    OG_CLOSED => t('Closed'),
  ); 
}

/**
 * Add fields to group post node types.
 * 
 * @param $node_types
 *   Array of the node types that need to have the field attached to.
 * @return
 *   The node types that have been changed, as some might already have the
 *   fields attached to them.
 */
function og_ui_group_type_set_fields($node_types = array()) {
  foreach ($node_types as $type) {
    $field = field_info_field('og_audience');
    if (empty($field)) {
      $field = array(
        'field_name' => 'og_audience',
        'type' => 'og',
        'locked' => TRUE,
      );
      $field = field_create_field($field);
    }

    $instance = field_info_instance('og_audience', $type);
    if (empty($instance)) {
      $instance = array(
        'field_name' => 'og_audience',
        'bundle' => $type,
        'label' => t('Groups audience'),
        'widget_type' => 'og_audience',
        'display' => array(
          'full' => array(
            'label' => 'above',
            'type' => 'og_list_default',
          ),
          'teaser' => array(
            'label' => 'above',
            'type' => 'og_list_default',
          ),
        ),
      );
      field_create_instance($instance);
    }
    
    $field = field_info_field('og_selective');
    if (empty($field)) {
      $field = array(
        'field_name' => 'og_selective',
        'type' => 'list_text',
        'locked' => TRUE,
        'settings' => array('allowed_values' => '', 'allowed_values_function' => 'og_ui_group_selective'),
        'required' => TRUE,       
      );
      $field = field_create_field($field);
    }

    $instance = field_info_instance('og_selective', $type);
    if (empty($instance)) {
      $instance = array(
        'field_name' => 'og_selective',
        'bundle' => $type,
        'label' => t('Groups selective'),
        'widget_type' => 'options_select',
        'display' => array(
          'full' => array(
            'label' => 'above',
            'type' => 'list_default',
          ),
          'teaser' => array(
            'label' => 'above',
            'type' => 'list_default',
          ),
        ),
      );
      field_create_instance($instance);
    }    
  }
}

/**
 * Add fields to group post node types.
 * 
 * @param $node_types
 *   Array of the node types that need to have the field attached to.
 * @return
 *   TODO: The node types that have been changed, as some might already have the
 *   fields attached to them.
 */
function og_ui_group_post_type_set_fields($node_types = array()) {
}

function og_ui_group_selective() {
  return module_invoke_all('og_group_selective_info');
}

/**
 * Edits to membership should
 *   
 * go through og_save_subscription(). No access control since this is an API function.
 *
 * @return string 'approval', 'subscribed' or 'rejected' depending on the group's configuration.
 **/

/**
 * Create a new membership for a given user to given group. 
 * 
 * @param $gid
 *   The group ID.
 * @param $account
 *   Optional; The user object. If not set the current user will be used.
 * @param $request
 *   Optional; The request message that should be sent to the group admin.
 * @return
 *  A keyed array with "type" as the subscription result, and "message" with the
 *  message to be presented to the user.
 */
function og_ui_subscribe_user($gid, $account = NULL, $request = '') {
  if (empty($account)) {
    global $user;
    $account = $user;
  }
  
  $node = node_load($gid);
  $group = og_get_group($gid);
   
  switch (og_ui_get_og_selective($node)) {
    case OG_OPEN:
      og_set_association($gid, $account->uid, 'user', OG_STATE_ACTIVE);      
      $return = array('type' => 'subscribed', 'message' => t('You are now a member of the %group.', array('%group' => $node->title)));
      break;
          
    // Moderated groups must approve all members.
    case OG_MODERATED:
      og_set_association($gid, $account->uid, 'user', OG_STATE_PENDING);
      
      // Get the privileged users that should approve and deny the subscription.
      $roles = $group->data['permissions']['approve and deny subscription']['roles'];
      $uids = og_get_users_by_roles($node->nid, $roles);
      
      // Add the group manager.
      $uids[] = $node->uid;
      
      // Allow other modules to alter the users.
      drupal_alter('og_ui_user_request', $uids, $node, $group, $account, $request);
            
      if (!empty($uids)) {
        // Prepare variables for Rules to act on the user subscription.
/*        $variables = array(
          '@group' => $node->title,
          '@username' => $account->name,
          '!approve_url' => url("og/approve/$node->nid/$account->uid", array('absolute' => TRUE)),
          '!group_url' => url("og/users/$node->nid", array('absolute' => TRUE)),
          '@request' => $request,
        );*/
      }
      
      $return = array('type' => 'approval', 'message' => t('Membership request to the %group group awaits approval by an administrator.', array('%group' => $node->title)));
      break;

    case OG_CLOSED:
    case OG_INVITE_ONLY:
      // Admins can add members to these groups, but others can't.
      if (og_is_group_admin($node)) {
        og_save_subscription($gid, $account->uid, array('is_active' => 1));
      }
      else {
        $return = array('type' => 'rejected', 'message' => t('Membership request to the %group group was rejected, only group administrators can add users to this group.', array('%group' => $node->title)));
      }
  }
  return $return;
}

/**
 * Get the selective type of the group.
 * 
 * @param $node
 *   The group node.
 */
function og_ui_get_og_selective($node) {
  // TODO: Make dynamic.
  $field = 'field_og_selective';
  $langcode = FIELD_LANGUAGE_NONE;
  return $node->{$field}[$langcode][0]['value'];  
}

/**
 * Set group context using the menu system.
 *
 * Modules may override the custom theme and group context set here.
 * @see og_set_group_context()
 *
 * @return
 *   A group node object, or NULL if no context was found.
 */
function og_ui_determine_context() {
  $item = menu_get_item();
  $object = menu_get_object();

  // Use the menu system to get the path.
  $path = $item['path'];

  // Check if this is an existing node.
  if (!empty($object->nid)) {
    $node = $object;
  }
  // Check if we are in the node add page.
  elseif (strpos($path, 'node/add') === 0 && !empty($_REQUEST['gids'])) {
    // URL pattern: node/add/story?gids[]=1
    $gid = intval(current($_REQUEST['gids']));
    $node = node_load($gid);
  }
  elseif (($item['map'][0] == 'og' && !empty($item['map'][2])) || $path == 'comment/reply/%') {
    $node = menu_get_object('node', 2);
  }
  elseif ($path == 'comment/edit' || $path == 'comment/delete') {
    // Get the node from the comment object.
    $comment = comment_load($item['page_arguments'][0]);
    $node = node_load($comment->nid);
  }

  if (!empty($node) && ($group_node = og_ui_determine_context_by_node($node))) {
    return $group_node;
  }
}

/**
 * Get an appropriate group node to be set as the group context.
 *
 * If a group post belongs to multiple group nodes, the logic for determining the
 * group node is:
 * 1) TODO: Are we still writing things to the seesion ?
 *    The group we showed on the prior page view (if any).
 * 2) The only or one of the group(s) the current user is a member of.
 * 3) The 'first' group in $node->og_groups.
 *
 * @param $node
 *   The node that the context should be retrieved from.
 * @param $account
 *   (optional) The account to check, if not given use currently logged in user.
 * @return
 *   The group node if exists and accessible by the user.
 *
 * @see og_ui_determine_context()
 */
function og_ui_determine_context_by_node($node, $account = NULL) {
  if (empty($account)) {
    global $user;
    $account = $user;
  }
  if (og_is_group_type($node->type)) {
    $group_node = $node;
  }
  elseif (og_is_group_post_type($node->type) && ($groups = og_get_association_by_content($node->nid))) {

    if ($user_groups = og_get_association_by_content($account->uid, 'user')) {
      $gid = current(array_intersect(array_keys($groups), array_keys($user_groups)));
    }

    if (!empty($group)) {
      $group_node = node_load($group);
    }
  }
  // Make sure user has view access to the group node.
  if (!empty($group_node) && node_access('view', $group_node, $account)) {
    return $group_node;
  }
}

/**
 * Get the group context, if exists, for the current request.
 *
 * This is Used for things like setting current theme and breadcrumbs.
 * The context is set during og_ui_determine_context().
 *
 * @return
 *   The group node ID if exists.
 */
function og_ui_get_context() {
  return og_ui_set_context();
}

/**
 * Set the group context for the current request.
 *
 * Modules may set this as needed.
 * This context is originally set during hook_init().
 *
 * @param $node
 *   The group node object that should be set as the context.
 * @return
 *   The group node ID if set.
 */
function og_ui_set_context($node = NULL) {
  $gid = &drupal_static(__FUNCTION__, '');

  if ($gid && empty($node)) {
    return $gid;
  }

  if (!empty($node) && og_is_group_type($node->type)) {
    $gid = $node->nid;
  }

  return $gid;
}