<?php
// $Id$

/**
 * @file
 * Enable users to create and manage groups with roles and permissions.
 */

// Load all Field module hooks for organic groups.
require(drupal_get_path('module', 'og') . '/og.field.inc');

// Dispositioning of content and memberships after deletion of a group node.
define('OG_DELETE_NOTHING', 0);
define('OG_DELETE_ORPHANS', 1);
define('OG_DELETE_MOVE_NODES', 2);
define('OG_DELETE_MOVE_NODES_MEMBERSHIPS', 3);

/**
 * Define active group content states.
 */
define('OG_STATE_ACTIVE', 'active');

/**
 * Define pending group content states. The user is subscribed to the group but
 * isn't an active member yet.
 */
define('OG_STATE_PENDING', 'pending');

/**
 * Define blocked group content states. The user is rejected from the group.
 */
define('OG_STATE_BLOCKED', 'blocked');


/**
 * Modules should return this value from hook_og_access() to allow access to a
 * group menu item.
 */
define('OG_ACCESS_ALLOW', 'allow');

/**
 * Modules should return this value from hook_og_access() to deny access to a
 * group menu item.
 */
define('OG_ACCESS_DENY', 'deny');

/**
 * Modules should return this value from hook_og_access() to not affect group
 * menu item access.
 */
define('OG_ACCESS_IGNORE', NULL);

/**
 * Group audience field.
 */
define('OG_AUDIENCE_FIELD', 'og_audience');

/**
 * Group field.
 */
define('OG_GROUP_FIELD', 'og_group');

/**
 * Group default roles and permissions field.
 */
define('OG_DEFAULT_ACCESS_FIELD', 'og_group_default_access');

/**
 * The role name of group non-members.
 */
define('OG_ANONYMOUS_ROLE', 'anonymous member');

/**
 * The role name of group member.
 */
define('OG_AUTHENTICATED_ROLE', 'authenticated member');

/**
 * The role name of group administrator.
 */
define('OG_ADMINISTRATOR_ROLE', 'administrator member');

/*******************************************************************************
 * Hook implementations
 ******************************************************************************/

/**
 * Implements hook_entity_info().
 */
function og_entity_info() {
  $return['og'] = array(
    'label' => t('Organic group'),
    'entity class' => 'EntityOg',
    'controller class' => 'OgController',
    'base table' => 'og_groups',
    'object keys' => array(
      'id' => 'gid',
    ),
    // Entity-metadata properties.
    'creation callback' => 'og_create_group'
  );
  return $return;
}

/**
 * Implements hook_entity_property_info().
 */
function og_entity_property_info() {
  $info = array();
  $properties = &$info['og']['properties'];

  $properties['gid'] = array(
    'label' => t("Group ID"),
    'type' => 'integer',
    'description' => t("The unique ID of the group."),
    'required' => TRUE,
  );

  $properties['eid'] = array(
    'label' => t("Object ID"),
    'type' => 'integer',
    'description' => t("The ID of the entity."),
    'required' => TRUE,
  );

  $properties['entity_type'] = array(
    'label' => t("Object type"),
    'type' => 'text',
    'description' => t("The entity type."),
    'required' => TRUE,
  );

  $properties['state'] = array(
    'label' => t("State"),
    'type' => 'text',
    'description' => t("The state of the group."),
    'setter callback' => 'entity_metadata_verbatim_set',
    'options list' => 'og_group_states',
  );

  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the group was created."),
    'setter callback' => 'entity_metadata_verbatim_set',
  );

  return $info;
}

/**
 * Return the states a group can be in.
 */
function og_group_states() {
  return array(
    OG_STATE_ACTIVE => t('Active'),
    OG_STATE_PENDING => t('Pending'),
  );
}

/**
 * Return the states a group can be in.
 */
function og_group_content_states() {
  return array(
    OG_STATE_ACTIVE => t('Active'),
    OG_STATE_PENDING => t('Pending'),
    OG_STATE_BLOCKED => t('Blocked'),
  );
}


/**
 * Return a loaded group entity if exists or create a new one.
 *
 * @param $eid
 *   The group content ID.
 * @param $entity_type
 *   The group entity type. "node" is the default value. Pass "gid" if the the
 *   content ID is equal to the group unique ID.
 * @param $create
 *   Optional; If no existing group is found, create a new one. Defaults to TRUE.
 *
 * @return
 *   The group entity if found, or an empty array.
 */
function og_get_group($entity_type, $eid, $create = FALSE, $states = array(OG_STATE_ACTIVE)) {
  $group = FALSE;
  if ($gids = og_get_group_ids($entity_type, array($eid), $states)) {
    $group = og_load($gids[$eid]);
  }
  elseif ($create) {
    $group = og_create_group(array('entity_type' => $entity_type, 'eid' => $eid));
  }
  return $group;
}


/**
 * Callback to create a new group.
 */
function og_create_group($values = array()) {
  $group = new EntityOg(array(
    'entity_type' => $values['entity_type'],
    'eid' => $values['eid'],
    // Initialize values.
    'state' => !empty($values['state']) ? $values['state'] : OG_STATE_ACTIVE,
    'created' => !empty($values['created']) ? $values['created'] : time(),
    'is_new' => TRUE,
    // Support specifying custom group ids.
    'gid' => !empty($values['gid']) ? $values['gid'] : NULL,
  ));

  return $group;
}

/**
 * Controller class for organic groups.
 */
class OgController extends EntityAPIController {
  function load($ids = array(), $conditions = array()) {
    $gids = og_get_group_ids(!empty($conditions['entity_type']) ? $conditions['entity_type'] : 'gid', $ids);

    // Unset the entity type condition.
    unset($conditions['entity_type']);
    return parent::load($gids, $conditions);
  }
}

/**
 * Main class for organic groups entities.
 */
class EntityOg extends EntityDB {
  public function __construct(array $values = array(), $entityType = NULL) {
    parent::__construct($values, 'og');
  }
}


/**
 * Load multiple organic groups entities based on certain conditions.
 *
 * @param $gids
 *   An array of group entity IDs.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of test entity entitys, indexed by pid.
 */
function og_load_multiple($gids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('og', $gids, $conditions, $reset);
}

/**
 * Load an organic groups entity from the database.
 *
 * @param $gid
 *   The group ID.
 * @param $reset
 *   Whether to reset the node_load_multiple cache.
 *
 * @return
 *   A fully-populated group entity, or FALSE if none found.
 */
function og_load($gid, $reset = FALSE) {
  $group = og_load_multiple(array($gid), array(), $reset);
  return $group? reset($group) : FALSE;
}

/**
 * Save a group entity.
 *
 * @param $group
 *   The group entity.
 * @return
 *   The group entity.
 */
function og_save($group) {
  $group->save();

  return $group;
}


/**
 * Delete multiple organic groups entities.
 *
 * @param $gids
 *   An array of group entity IDs.
 */
function og_delete_multiple(array $gids) {
  entity_get_controller('og')->delete($gids);
}

function og_delete($gid) {
  og_delete_multiple(array($gid));

  // Delete roles and permissions.
  og_group_delete_user_roles($gid, NULL, TRUE);
}


/**
 * Get a group ID by the entity type and entity IDs.
 *
 * @param $eid
 *   The group content ID.
 * @param $entity_type
 *   The group entity type. "node" is the default value. Pass "gid" if the the
 *   content ID is equal to the group unique ID.
 *
 * @return
 *   Array keyed with the entity ID and the group ID as the value.
 */
function og_get_group_ids($entity_type = 'gid', $eids = array(), $states = array(OG_STATE_ACTIVE)) {
  $gids = &drupal_static(__FUNCTION__, array());

  $required_eids = $eids = drupal_map_assoc($eids);

  if (!empty($gids[$entity_type])) {
    // Check we don't already have the group IDs.
    foreach ($gids[$entity_type] as $eid => $gid) {
      unset($eids[$eid]);
    }
  }
  else {
    $gids[$entity_type] = array();
  }

  if (!empty($eids)) {
    if ($entity_type == 'gid') {
      $gids[$entity_type] = $gids[$entity_type] + drupal_map_assoc($eids);
    }
    else {
      $query = db_select('og_groups', 'og_groups');
      $query->fields('og_groups', array('eid', 'gid'))
      ->condition('entity_type', $entity_type)
      ->condition('eid', $eids, 'IN');
      if (!empty($states)) {
        $query->condition('state', $states, 'IN');
      }
      $gids[$entity_type] = $query->execute()->fetchAllKeyed();
    }
  }
  // Make sure we return only the ids we were asked for.
  $return = array_intersect_key($gids[$entity_type], $required_eids);

  return $return;
}

/**
 * Return all existing groups with a certain state.
 * @param $states
 * @return unknown_type
 */
function og_get_all_group_ids($states = array(OG_STATE_ACTIVE)) {
  $return = array();
  $query = db_select('og_groups', 'og_groups');
  $query->fields('og_groups', array('gid'));
  if (!empty($states)) {
    $query->condition('state', $states, 'IN');
  }
  $result = $query->execute()->fetchAll();

  foreach ($result as $value) {
    $return[$value->gid] = $value->gid;
  }

  return $return;
}

/**
 * Set an association (e.g. subscribe) an entity to a group.
 *
 * @param $entity_type
 *   The entity type (e.g. "node" or "user").
 * @param $entity
 *   The entity to set the association.
 * @param $state
 *   The state of the association. Can be:
 *   - OG_STATE_ACTIVE
 *   - OG_STATE_PENDING
 *   - OG_STATE_BLOCKED
 * @param $save
 *   Optional; TRUE if fields value should be saved. Defaults to TRUE.
 *
 * @return
 *   The entity with the fields updated.
 */
function og_group($gid, $entity_type, $entity, $state = OG_STATE_ACTIVE, $save = TRUE) {
  $entity = og_load_entity($entity_type, $entity);
  $property = OG_AUDIENCE_FIELD;

  $wrapper = &$entity->{$property}[LANGUAGE_NONE];

  $op = !empty($wrapper[0]['gid']) ? 'update' : 'insert';

  if ($op == 'insert') {
    $values = array(
      'gid' => $gid,
      'state' => $state,
      'created' => time(),
    );
    $wrapper[] = $values;
  }
  else {

    $existing_key = FALSE;
    if (!empty($wrapper)) {
      foreach ($wrapper as $key => $value) {
        if ($gid == $value['gid']) {
          $existing_key = $key;
          break;
        }
      }
    }

    if ($existing_key === FALSE) {
      $values = array(
        'gid' => $gid,
        'state' => $state,
        'created' => time(),
      );
      $entity->{$property}[LANGUAGE_NONE][] = $values;

    }
    else {
      if ($wrapper[$existing_key]['state'] != $state) {
        $wrapper[$existing_key]['state'] = $state;
      }
      else {
        // Nothing changed, so don't try to save.
        $save = FALSE;
      }
    }
  }

  if ($save) {
    // Save the entity.
    call_user_func('field_attach_' . $op, $entity_type, $entity);
    drupal_static_reset('og_get_entity_groups');
  }

  return $entity;
}

/**
 * Delete an an association (e.g. unsubscribe) of an entity to a group.
 *
 * @param $entity_type
 *   The entity type (e.g. "node" or "user").
 * @param $entity
 *   The entity to set the association.
 * @param $save
 *   Optioanl; TRUE if fields value shoudl be saved. Defaults to TRUE.
 *
 * @return
 *   The entity with the fields updated.
 */
function og_ungroup($gid, $entity_type, $entity, $save = TRUE) {
  $entity = og_load_entity($entity_type, $entity);
  $property = OG_AUDIENCE_FIELD;

  $wrapper = &$entity->{$property}[LANGUAGE_NONE];

  $existing_key = FALSE;
  if (!empty($wrapper)) {
    foreach ($wrapper as $key => $value) {
      if ($gid == $value['gid']) {
        $existing_key = $key;
        break;
      }
    }
  }
  if ($existing_key !== FALSE) {
    unset($wrapper[$existing_key]);

    if ($save) {
      // Save the field change.
      call_user_func('field_attach_update', $entity_type, $entity);

      if ($entity_type == 'user') {
        foreach (og_get_user_roles($gid, $entity->uid) as $rid) {
          og_users_roles_revoke($gid, $entity->uid, $rid);
        }
      }
      drupal_static_reset('og_get_entity_groups');
    }
  }

  return $entity;
}

/**
 * Determine whether a user has a given privilege.
 *
 * @param $gid
 *   The group ID.
 * @param $string
 *   The permission, such as "administer nodes", being checked for.
 * @param $account
 *   (optional) The account to check, if not given use currently logged in user.
 *
 * @return
 *   Boolean TRUE if the current user has the requested permission.
 *
 * All permission checks in OG should go through this function. This
 * way, we guarantee consistent behavior, and ensure that the superuser
 * can perform all actions.
 */
function og_user_access($gid, $string, $account = NULL) {
  if (variable_get('og_skip_access', FALSE)) {
    // User access should always return TRUE, as organic groups is requested to
    // skip any access check.
    return TRUE;
  }

  global $user;
  $perm = &drupal_static(__FUNCTION__, array());

  if (empty($account)) {
    $account = $user;
  }

  // User #1 has all privileges.
  if ($account->uid == 1) {
    return TRUE;
  }

  // Administer organic groups permission.
  if (user_access('administer organic groups', $account)) {
    return TRUE;
  }

  if (!($group = og_load($gid))) {
    // Not a group.
    return FALSE;
  }

  // Group manager has all privileges (if variable is TRUE).
  if (variable_get('og_group_manager_full_access', TRUE)) {
    $entity = current(entity_load($group->entity_type, array($group->eid)));
    if (!empty($entity->uid) && $entity->uid == $account->uid) {
      return TRUE;
    }
  }

  // To reduce the number of SQL queries, we cache the user's permissions
  // in a static variable.
  if (!isset($perm[$gid][$account->uid])) {
    $user_groups = og_get_entity_groups('user', $account);

    $roles = og_get_user_roles($gid, $account->uid);
    $role_permissions = og_user_role_permissions($roles);

    $perms = array();
    foreach ($role_permissions as $one_role) {
      $perms += $one_role;

      $perm[$gid][$account->uid] = $perms;
    }

  }
  return isset($perm[$gid][$account->uid][$string]);
}


/**
 * Implements hook_permission().
 */
function og_permission() {
  return array(
    'administer organic groups' =>  array(
      'title' => t('Administer organic groups permissions'),
      'description' => t('Administer all groups and permissions.'),
    ),
  );
}

/**
 * Implement hook_init().
 */
function og_init() {
  og_context();
}

/**
* Implement hook_node_type_delete().
*/
function og_node_type_delete($info) {
  variable_del('og_group_type_' . $info->type);
  variable_del('og_group_content_type_' . $info->type);
}

/**
* Implement hook_node_type_insert().
*/
function og_node_type_insert($info) {
  og_node_type_save($info->type);
}

/**
* Implement hook_node_type_update().
*/
function og_node_type_update($info) {
  og_node_type_save($info->type);
}

/**
 * Add group and group content fields to new content types.
 *
 * @param $bundle_name
 *   The content type name.
 */
function og_node_type_save($bundle_name) {
  if (variable_get('og_group_type_' . $bundle_name, 'omitted') == 'group') {
    og_create_field('og_group','node', $bundle_name);
    // Delete the variable, as we will rely on the presence of th field.
    variable_del('og_group_type_' . $bundle_name);
  }
  if (variable_get('og_group_content_type_' . $bundle_name, 'omitted') == 'group_content') {
    og_create_field('og_audience','node', $bundle_name);
    // Delete the variable, as we will rely on the presence of th field.
    variable_del('og_group_content_type_' . $bundle_name);
  }
}

/**
 * Implement hook_og_permission().
 */
function og_og_permission() {
  return array(
    'update group' => array(
      'title' => t('Edit group'),
      'description' => t('Edit the group content.'),
    ),
    'update own group content' => array(
      'title' => t('Edit own group content'),
      'description' => t('Edit own group content that belong to the group.'),
    ),
    'update any group content' => array(
      'title' => t('Edit any group content'),
      'description' => t('Edit any group content that belong to the group.'),
    ),
    'delete own group content' => array(
      'title' => t('Delete own group content'),
      'description' => t('Delete own group content that belong to the group.'),
    ),
    'delete any group content' => array(
      'title' => t('Delete any group content'),
      'description' => t('Delete any of the group content that belong to the group.'),
    ),
    'administer group' => array(
      'title' => t('Administer group'),
      'description' => t('Manage or block users, and manage their role assignments in the group.'),
    ),
  );
}

/**
 * Implement hook_og_get_default_permissions().
 */
function og_og_get_default_permissions() {
  return array(
    'update own group content' => array(OG_AUTHENTICATED_ROLE),
    'delete own group content' => array(OG_AUTHENTICATED_ROLE),

    'update group' => array(OG_ADMINISTRATOR_ROLE),
    'update any group content' => array(OG_ADMINISTRATOR_ROLE),
    'delete any group content' => array(OG_ADMINISTRATOR_ROLE),
    'administer group' => array(OG_ADMINISTRATOR_ROLE),
  );
}

/**
 * Implement hook_og_get_default_roles()
 */
function og_og_get_default_roles() {
  return array(OG_ADMINISTRATOR_ROLE);
}

/**
 * Implement hook_og_access().
 */
function og_og_access($op, $group, $account, $acting_user) {
  if ($group->entity_type == 'node' && og_user_access($group->eid, $op, $acting_user)) {
    return OG_ACCESS_ALLOW;
  }
  return OG_ACCESS_IGNORE;
}

/**
 * Implement hook_og_node_access()
 */
function og_og_node_access($node, $op, $account) {
  if (og_is_group_type('node', $node->type)) {
    $group = og_get_group('node', $node->nid);
    if (og_user_access($group->gid, $op . ' group', $account)) {
      return NODE_ACCESS_ALLOW;
    }
  }
  else {
    // We don't have a context, so we need to get all the permissions
    // of all the groups. We don't intersect with the user's group, as
    // groups might allow anonymous members access.
    $gids = array_keys(og_get_entity_groups('node', $node));
    foreach ($gids as $gid) {
      if (og_user_access($gid, $op . ' group content', $account) || og_user_access($gid, $op . ' any group content', $account) || (og_user_access($gid, $op . ' own group content', $account) && $node->uid == $account->uid)) {
        return NODE_ACCESS_ALLOW;
      }
    }
  }
}

/**
 * Implement hook_node_access()
 */
function og_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : (is_array($node) ? $node['type'] : $node->type);
  if ($op != 'create' && (og_is_group_type('node', $type) || og_is_group_content_type('node', $type))) {
    $access = module_invoke_all('og_node_access', $node, $op, $account);
    if (in_array(OG_ACCESS_DENY, $access, TRUE)) {
      return NODE_ACCESS_DENY;
    }
    elseif (in_array(OG_ACCESS_ALLOW, $access, TRUE)) {
      return NODE_ACCESS_ALLOW;
    }
  }
  // Not an organic group node type.
  return NODE_ACCESS_IGNORE;
}

/**
 * Implementation of hook_views_api().
 */
function og_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'og') . '/includes',
  );
}

/**
 * Get label information to fieldable entities.
 *
 * TODO: Implement hook_entity_info_alter().
 * TODO: see  http://drupal.org/node/629484 for discussion.
 *
 * @param $entity
 *   The entity name to populate with the label data.
 * @return
 *   The entity info merged with the label data.
 *
 */
function og_entity_label($entity) {
  $entity_info = entity_get_info($entity);

  $entity_labels = array(
    'comment' => 'subject',
    'node' => 'title',
    'file' => 'filename',
    'taxonomy_term' => 'name',
    'user' => 'name',
  );

  $entity_info['entity keys']['label'] = $entity_labels[$entity];

  return $entity_info;
}

/**
 * Implement og_get_fields().
 */
function og_og_get_fields() {
  $items['og_group'] = array(
    'type' => array('group'),
    'description' => t('Determine if this should be a group.'),
    'field' => array(
      'field_name' => 'og_group',
      'type' => 'list_boolean',
      'cardinality' => 1,
      'settings' => array('allowed_values' => implode("\r\n", array('0|Not a group type', '1|Group type')), 'allowed_values_function' => ''),
    ),
    'instance' => array(
      'label' => t('Group type'),
      'widget_type' => 'options_buttons',
      'display' => array(
        'full' => array(
          'label' => 'above',
          'type' => 'list_default',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'list_default',
        ),
      ),
    ),
  );

  $items['og_group_default_access'] = array(
    'type' => array('group'),
    'description' => t('Determine if group should use default roles and permissions.'),
    'field' => array(
      'field_name' => 'og_group_default_access',
      'type' => 'list_boolean',
      'cardinality' => 1,
      'settings' => array('allowed_values' => implode("\r\n", array('0|Use default roles and permissions', '1|Override default roles and permissions')), 'allowed_values_function' => ''),
    ),
    'instance' => array(
      'label' => t('Group roles and permissions'),
      'widget_type' => 'options_buttons',
      'display' => array(
        'full' => array(
          'label' => 'above',
          'type' => 'list_default',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'list_default',
        ),
      ),
    ),
  );


  $items['og_audience'] = array(
    'type' => array('group content'),
    'description' => t('Determine to which groups this group content is assigned to.'),
    'field' => array(
      'field_name' => 'og_audience',
      'type' => 'og',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    ),
    'instance' => array(
      'label' => t('Groups audience'),
      'widget_type' => 'og_audience',
      'display' => array(
        'full' => array(
          'label' => 'above',
          'type' => 'og_list_default',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'og_list_default',
        ),
      ),
    ),
  );

  return $items;
}


/*******************************************************************************
 * API functions
 ******************************************************************************/

/**
 * Get users belonging to a group.
 *
 * @param $gid
 *   The group ID.
 * @param $count
 * @param $cursor
 *
 * @return
 *   Users entitys.
 */
function og_get_group_users($gid, $count = FIELD_QUERY_NO_LIMIT, &$cursor = 0) {
  $return = array();

  $field = field_info_field('og_audience');

  $conditions = array(
    array('gid', $gid),
    array('type', 'user'),
  );

  // Get the entitys IDs.
  if ($result = field_attach_query($field['id'], $conditions, array('limit' => $count, 'cursor' => $cursor))) {
    $uids = array();
    foreach ($result['user'] as $key => $value) {
      $uids[$key] = $key;
    }
    // Load the users.
    $return = user_load_multiple($uids);
  }
  return $return;
}

/**
 * Get the groups a content is associated with.
 *
 * @param $entity_type
 *   The entity type (e.g. "node" or "user").
 * @param $entity
 *   The entity can be a user, node or any fieldable entity.
 * @param $states
 *   Optioanl; Array with the state to return. If empty groups of all state will
 *   return.
 * @return
 *  An array with the group, or an empty array.
 */
function og_get_entity_groups($entity_type, $entity, $states = array(OG_STATE_ACTIVE)) {
  $groups = &drupal_static(__FUNCTION__, array());

  if (!empty($groups)) {
    return $groups;
  }

  $entity = og_load_entity($entity_type, $entity);
  $property = OG_AUDIENCE_FIELD;

  $wrapper = &$entity->{$property}[LANGUAGE_NONE];

  $groups = array();
  if (!empty($wrapper)) {
    foreach ($wrapper as $group) {
      if (!empty($states) && !in_array($group['state'], $states)) {
        // Don't register the group if it's state isn't the one we look for.
        continue;
      }
      $groups += drupal_map_assoc(array($group['gid']));
    }
  }
  return $groups;
}

/**
 * Return the group type (i.e. "group" or "group_content") of an entity.
 *
 * @param $bundle_name
 *   The bundle name to be checked.
 * @param $entity_type
 *   The entity type.
 * @param $type
 *   The grou usage type. Must be "group" or "group content".
 *
 * @return
 *   The group type or an "omitted" if node type doesn't participate in
 *   organic groups.
 */
function og_get_group_type($entity_type, $bundle_name, $type = 'group') {
  if ($type == 'group') {
    return (bool)field_info_instance($entity_type, 'og_group', $bundle_name);
  }
  elseif ($type == 'group content') {
    return (bool)field_info_instance($entity_type, 'og_audience', $bundle_name);
  }
}

/**
 * Return TRUE if the entity type is a "group" type.
 *
 * This is a wrapper function around og_get_group_type().
 *
 * @param $node_type
 *   The node type to be checked.
 */
function og_is_group_type($entity_type, $bundle_name) {
  return og_get_group_type($entity_type, $bundle_name);
}

/**
 * Return TRUE if the entity type is a "group content" type.
 *
 * This is a wrapper function around og_get_group_type().
 *
 * @param $node_type
 *   The node type to be checked.
 */
function og_is_group_content_type($entity_type, $bundle_name) {
  return og_get_group_type($entity_type, $bundle_name, 'group content');
}

/**
 * Return TRUE if entity belongs to a group.
 *
 * @param $gid
 * @param $entity_type
 * @param $entity
 * @return unknown_type
 */
function og_is_member($gid, $entity_type = 'user', $entity = NULL) {
  if ($entity_type == 'user' && empty($entity)) {
    global $user;
    $entity = $user;
  }
  $groups = og_get_entity_groups($entity_type, $entity);
  return in_array($gid, $groups);
}

/**
 * Menu callback; Central access point for all organic groups actions.
 *
 * Function is imittating hook_node_access().
 *
 * @param $op
 *   The operation name.
 * @param $node
 *   Optioanl; The node entity.
 * @param $account
 *   Optioanl; The user related to the action. For example if the operation is
 *   "subscribe" then the account will be the subscribing user.
 * @param $acting_user
 *   Optioanl; The acting user. For example if the operation is
 *   "subscribe" then the acting user might be the admin who should approve
 *   or deny - according to this user access is decided.
 *   If this field is empty the current user is used.
 * @return
 *   TRUE if access is allowed, otherise FALSE.
 */
function og_access($op, $entity_type = NULL, $eid = NULL, $account = NULL, $acting_user = NULL) {
  if (empty($acting_user)) {
    global $user;
    $acting_user = $user;
  }
  if (user_access('administer organic groups', $acting_user)) {
    return TRUE;
  }

  if (!$group = og_get_group($entity_type, $eid)) {
    // Not a group.
    return FALSE;
  }

  // Get the group real entity, so we can check the user ID of the entity.
  $entity = current(entity_load($entity_type, array($eid)));

  if (!empty($entity->uid) && $entity->uid == $acting_user->uid) {
    // Group manager.
    return TRUE;
  }

  $acting_user = og_load_entity('user', $acting_user);
  if (!empty($account)) {
    $account = og_load_entity('user', $account);
  }

  // Check if the user was blocked.
  if (($state = og_get_entity_state($group->gid, 'user', $acting_user)) && $state == OG_STATE_BLOCKED) {
    return FALSE;
  }

  $access = module_invoke_all('og_access', $op, $group, $account, $acting_user);
  if (in_array(OG_ACCESS_DENY, $access, TRUE)) {
    return FALSE;
  }
  elseif (in_array(OG_ACCESS_ALLOW, $access, TRUE)) {
    return TRUE;
  }
  // No one allowed access, so assume access is denied.
  return FALSE;
}

/**
 * Get the state of an entity in a group.
 *
 * @param $entity_type
 *   The entity type.
 * @param $entity
 *   The entity.
 * @param $gid
 *   The group ID.
 * @return
 *   The state value, or FALSE is entity is not associated with group.
 */
function og_get_entity_state($gid, $entity_type, $entity) {
  $state = FALSE;

  $entity = og_load_entity($entity_type, $entity);
  $property = OG_AUDIENCE_FIELD;

  $wrapper = &$entity->{$property}[LANGUAGE_NONE];

  if (!empty($wrapper)) {
    foreach ($wrapper as $key => $value) {
      if ($value['gid'] == $gid) {
        // Save the state.
        $state = $value['state'];
      }
    }
  }
  return $state;
}

/**
 * Check if group should use default roles and permissions.
 *
 * @param $gid
 *   The group ID.
 * @return
 *   TRUE if group should use default roles and permissions.
 */
function og_is_group_default_access($gid) {
  $return = FALSE;
  if ($entity = og_load_entity_from_group($gid)) {

    $property = OG_DEFAULT_ACCESS_FIELD;

    $wrapper = &$entity->{$property}[LANGUAGE_NONE];
    $return = empty($wrapper[0]['value']);
  }

  return $return;
}

function og_get_entity_from_context() {
  $entity = FALSE;

  $item = menu_get_item();

  return $entity;

}

/**
 * Get all the context handlers.
 */
function og_get_context_handlers() {
  $handlers = module_invoke_all('og_context_handlers');

  // Allow other modules to alter the handlers.
  drupal_alter('og_context_handlers', $handlers);

  return $handlers;
}

/**
 * Implement hook_og_context_handlers()
 *
 * Handle core enteties.
 */
function og_og_context_handlers() {
  $items = array();

  return $items;
}

/**
 * Get or set group context using the menu system.
 *
 * @param $group
 *   Optional; The group entity to set as the context.
 * @param $account
 *   Optional; The user entity to determine context form.
 *
 * @return
 *   A group entity, or FALSE if no context was found.
 */
function og_context($group = NULL, $account = NULL) {
  $context = &drupal_static(__FUNCTION__, FALSE);

  if (!empty($group)) {
    $context = $group;
  }

  if (empty($context) && variable_get('og_context', TRUE)) {
    if (empty($account)) {
      global $user;
      $account = $user;
    }

    $item = menu_get_item();

    // Check the page arguments if one of them is an object, and check if it is
    // a group or group content.
    if (!empty($item['page_arguments']) && !empty($item['map'][0])) {
      $entity_type = $item['map'][0];
      foreach ($item['page_arguments'] as $argument) {
        if (is_object($argument)) {
         // Check if it's a group.
          list($id) = entity_extract_ids($entity_type, $argument);
          if ($group = og_get_group($entity_type, $id, FALSE)) {
            $groups = array($group->gid => $group->gid);
          }
          else {
            $groups = og_get_entity_groups($entity_type, $argument);
          }
          // TODO: Add context based on ?gid_gids[] in URL.
          if (!empty($groups)) {
            // Get the user's group and try to intersect.
            $user_groups = og_get_entity_groups('user', $account);
            if ($intersect_gids = array_intersect($groups, $user_groups)) {
              $gid = reset($intersect_gids);
            }
            else {
              // The user is not a member of any of the groups. Let's check
              // if it's a node, as node access might be FALSE.
              $groups = og_load_multiple($groups);
              // For performance reasons we prefer not to use node_access()
              // so we first check if the group content is associated with
              // non-node groups.
              if (!empty($groups['node'])) {
                $node_gids = $groups['node'];
                unset($groups['node']);
                if (!empty($groups)) {
                  $gids = reset($groups);
                  $gid = reset($gid);
                }
                else {
                  // We have only nodes as groups, so check access to them.
                  // TODO: have og_get_group_mulitple().
                  foreach ($node_gids as $node_gid) {
                    $group = og_get_group('gid', $node_gid);
                    $nid = $group->eid;
                    $node = node_load($nid);
                    if (node_access('view', $node, $account)) {
                      $gid = $group->gid;
                      break;
                    }
                  }
                }
              }
            }

            if (!empty($gid)) {
              $group = og_get_group('gid', $gid);
            }
          }
        }
      }

      if (!empty($group)) {
        $context = $group;
      }
    }
  }

  return $context;
}

/**
 * Add the group entity of the context to the Drupal javascript entity.
 *
 * @param $group
 *   A group entity.
 */
function og_context_js($group) {
  // Static variable to indicate if group was already added to javacript.
  $js = &drupal_static(__FUNCTION__, FALSE);
  if (empty($js)) {
    drupal_add_js(array('og' => array('og_context' => $group)), 'setting');
    $js = TRUE;
  }
}

/**
 * Add context related templates and CSS.
 */
function og_preprocess_page(&$vars) {
  if ($group = og_context()) {
    // Add template suggestions.
    $vars['theme_hook_suggestions'][] = 'page__og_context';
    $vars['theme_hook_suggestions'][] = 'page__og_context_' . $group->gid;
    $vars['theme_hook_suggestions'][] = 'page__og_context_' . $group->entity_type;
    $vars['theme_hook_suggestions'][] = 'page__og_context_' . $group->entity_type . '_' . $group->eid;

    // Add CSS.
    $vars['classes_array'][] = 'og-context';
    $vars['classes_array'][] = 'og-context-' . $group->gid;
    $vars['classes_array'][] = 'og-context-' . $group->entity_type;
    $vars['classes_array'][] = 'og-context-' . $group->entity_type . '-' . $group->eid;

    // Add context to JS.
    og_context_js($group);
  }
}


/*******************************************************************************
 * Function callbacks
 ******************************************************************************/

/**
 * Select groups if they were passed in the URL.
 * You can pass a URL in in the form of
 * node/add/post?gids_gid[]=1,2,3&gids_node[]=4,5,6
 * Note that gids_ is the prefix followed by the entity type (e.g. "node",
 * "user") or "gid" to indicate the passed values are group ID.
 */
function og_get_context_by_url() {
  $return = array();
  foreach (array_merge(array_keys(entity_get_info()), array('gid')) as $entity_type) {
    $eids =  !empty($_REQUEST['gids_' . $entity_type][0]) ? explode(',', $_REQUEST['gids_' . $entity_type][0]) : array();
    if ($eids) {
      if ($gids = og_get_groups($entity_type, $eids)) {
        $gids = current($gids);
        $return = $return + $gids;
      }
    }
  }
  return $return;
}

/**
 * Get an array of allowed values for OG audience field.
 *
 * @return
 *   Array keyed by "content groups" and "other groups".
 */
function og_get_audience_options($opt_group = FALSE, $account = NULL) {
  $return = &drupal_static(__FUNCTION__, array());

  if (!empty($return)) {
    return $return;
  }

  if (empty($account)) {
    global $user;

    $account = $user;
  }

  $content_groups = og_get_entity_groups('user', $account);
  $return['content groups'] = $content_groups;

  if ($opt_group) {
    // Get all existing group.
    $all_groups = og_get_all_group_ids();
    $return['other groups'] = array_diff($all_groups, $content_groups);
  }

  return $return;
}


/**
 * Get labels of a group list.
 */
function og_get_groups_label($gids = array()) {
  $labels = array();
  $entity_types = og_sort_groups_by_type($gids);
  foreach ($entity_types as $entity_type => $groups) {
    $eids = array();
    foreach ($groups as $group) {
      $eids[] = $group->eid;
    }
    $labels = $labels + og_entity_get_label_multiple($entity_type, $eids);
  }
  return $labels;
}

/**
 * Return array of group entity keyed by their entity type.
 *
 * @param $gids
 *   Array of group ids to sort.
 */
function og_sort_groups_by_type($gids = array()) {
  $return = array();
  $groups = og_load_multiple($gids);
  foreach ($groups as $group) {
    $return[$group->entity_type][$group->gid] = $group;
  }
  return $return;

}

/**
 * Get the label (e.g. node title) of different entities.
 *
 * @param $entity_type
 *   The entity type.
 * @param $eids
 *   The entity IDs.
 * @return
 *   Array keyed with the group unqiue ID and the entity label as the value.
 */
function og_entity_get_label_multiple($entity_type, $eids = array()) {
  $return = array();

  $entity = og_entity_label($entity_type);

  // Get the table, ID and label of the object type.
  if (!empty($entity['object keys']['label'])) {
    $table = $entity['base table'];
    $id = $entity['object keys']['id'];
    $label = $entity['object keys']['label'];

    // Get the group ID along with the entity label.
    $query = db_select('og_groups', 'og')->fields('og', array('gid'));
    $query->condition('entity_type', $entity_type);

    $query->join($table, $table, "og.eid =  $table.$id");

    $return = $query->fields($table, array($label))
      ->condition($id, $eids, 'IN')
      ->execute()
      ->fetchAllKeyed();
  }
  else {
    // We got an entity type that we don't know how to get the label, so we'll
    // return the group ID as the laebl, prefixed with the entity type.
    foreach ($eids as $eid) {
      $return[$eid] = t('@entity_type ID  @value', array('@entity_type' => $entity_type, '@value' => $eid));
    }
  }

  return $return;
}

/**
 * Wrapper function to get the label of a single entity.
 *
 * @param $entity_type
 *   The entity type.
 * @param $eid
 *   The entity ID.
 * @return unknown_type
 */
function og_entity_get_label($entity_type, $eid) {
  return current(og_entity_get_label_multiple($entity_type, array($eid)));

}

/**
 * Wrapper function to invoke an event.
 */
function og_invoke_event() {
  if (module_exists('rules')) {
    // Invoke a Rules event.
  }
}

/**
 * Determine the permissions for one or more roles.
 *
 * @param $roles
 *   An array whose keys are the role IDs of interest, such as $user->roles.
 *
 * @return
 *   An array indexed by role ID. Each value is an array whose keys are the
 *   permission strings for the given role ID.
 */
function og_user_role_permissions($roles = array()) {
  $cache = &drupal_static(__FUNCTION__, array());

  $role_permissions = $fetch = array();

  if ($roles) {
    foreach ($roles as $rid => $name) {
      if (isset($cache[$rid])) {
        $role_permissions[$rid] = $cache[$rid];
      }
      else {
        // Add this rid to the list of those needing to be fetched.
        $fetch[] = $rid;
        // Prepare in case no permissions are returned.
        $cache[$rid] = array();
      }
    }

    if ($fetch) {
      // Get from the database permissions that were not in the static variable.
      // Only role IDs with at least one permission assigned will return rows.
      $result = db_query("SELECT rid, permission FROM {og_role_permission} WHERE rid IN (:fetch)", array(':fetch' => $fetch));

      foreach ($result as $row) {
        $cache[$row->rid][$row->permission] = TRUE;
      }
      foreach ($fetch as $rid) {
        // For every rid, we know we at least assigned an empty array.
        $role_permissions[$rid] = $cache[$rid];
      }
    }
  }

  return $role_permissions;
}

/**
 * Retrieve an array of roles matching specified conditions.
 *
 * @param $gid
 *   The group node ID.
 * @param $permission
 *   Optioanl; A string containing a permission. If set, only roles containing that
 *   permission are returned.
 * @param $force_group
 *   Optioanl; If TRUE then the roles of the group will be retrieved by the
 *   group ID, even if the group is set to have default roles and permissions.
 *
 * @return
 *   An associative array with the role id as the key and the role name as
 *   value. The anonymous and authenticated deault roles are on the top of the
 *   array.
 */
function og_user_roles($gid = 0, $permission = NULL, $force_group = FALSE) {
  $roles = array();

  // Check if overriden access exists.
  if (!$force_group) {
    $gid = og_is_group_default_access($gid) ? 0 : $gid;
  }

  if (!empty($permission)) {
    $roles = db_query("SELECT r.rid, r.name FROM {og_role} r INNER JOIN {og_role_permission} p ON r.rid = p.rid WHERE p.permission = :permission AND r.gid = :gid ORDER BY r.name", array(':permission' => $permission, ':gid' => $gid))->fetchAllKeyed();
  }
  else {
    $roles = db_query("SELECT rid, name FROM {og_role} WHERE gid = :gid ORDER BY rid", array(':gid' => $gid))->fetchAllKeyed();
  }

  return  $roles;
}

/**
 * Get global roles - roles that belong to non-existent group ID 0.
 *
 * @return
 *   A keyed array with role Id as key and role name as value.
 */
function og_get_global_roles() {
  return og_user_roles();
}

/**
 * Get default roles.
 */
function og_get_default_roles($include = TRUE) {
  $roles = module_invoke_all('og_get_default_roles');

  // Allow other modules to alter the roles and permissions.
  drupal_alter('og_get_default_roles', $roles);

  if ($include) {
    $roles = array_merge(array(OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE), $roles);
  }

  return $roles;
}

/**
 * Get default permissions.
 */
function og_get_default_permissions() {
  $perms = module_invoke_all('og_get_default_permissions');

  // Allow other modules to alter the roles and permissions.
  drupal_alter('og_get_default_permissions', $perms);

  return $perms;
}

/**
 * Set global roles and permissions.
 *
 * @return
 *   Array keyed by role ID and role name as value.
 */
function og_set_global_access() {
  $rids = array();

  $roles = og_get_default_roles();
  $perms = og_get_default_permissions();

  // Group permissions by role.
  $permissions = array();
  foreach ($perms as $name => $perm_roles) {
    foreach ($perm_roles as $perm_role) {
      $permissions[$perm_role][$name] = TRUE;
    }
  }

  if ($existing_roles = og_get_global_roles()) {
    // Delete all existing roles.
    foreach ($existing_roles as $rid => $name) {
      og_user_role_delete($rid);
    }
  }

  // Create new roles.
  foreach ($roles as $name) {
    $role = new stdClass;
    $role->name = $name;
    $role->gid = 0;

    og_user_role_save($role);
    $rids[$role->rid] = $role->name;
    if (!empty($permissions[$role->name])) {
      og_user_role_change_permissions($role->rid, $permissions[$role->name]);
    }
  }

  return $rids;
}

/**
 * Get all roles of a user in a certain group.
 *
 * If overriden roles and permissions don't exist
 *
 * @param $gid
 *   The group ID.
 * @param $uid
 *   The user ID.
 * @param $include
 *   Optional; If TRUE also anonymous or authenticated role ID will be returned.
 *   Defaults to TRUE.
 * @return
 *   Array with the role IDs of the user.
 */
function og_get_user_roles($gid, $uid = NULL, $include = TRUE) {
  $roles = array();

  if (empty($uid)) {
    global $user;
    $uid = $user->uid;
  }

  if ($include) {
    // Check if overriden access exists.
    $query_gid = og_is_group_default_access($gid) ? 0 : $gid;

    $group_roles = og_user_roles($query_gid);
    $account = user_load($uid);

    $name = og_is_member($gid, 'user', $account) ? OG_AUTHENTICATED_ROLE : OG_ANONYMOUS_ROLE;
    $rid = array_search($name, $group_roles);
    $roles[$rid] = $rid;
  }

  $roles = array_merge($roles, db_query("SELECT rid, rid FROM {og_users_roles} WHERE uid = :uid AND gid = :gid", array(':uid' => $uid, ':gid' => $gid))->fetchAllKeyed());

  return $roles;
}

/**
 * Get all the users with certain roles in a group.
 *
 * @param $gid
 *   The group unique ID.
 * @param $roles
 *   Array with the role IDs to query.
 */
function og_get_users_by_roles($gid, $rids = array()) {
  $query = db_select('og_users_roles', 'og_users_roles');
  return $query->fields('og_users_roles', array('uid'))
    ->condition('gid', $gid)
    ->condition('rid', $rids, 'IN')
    ->execute()
    ->fetchAll();
}


/**
 * Fetch a user role from database.
 *
 * @param $role
 *   An integer with the role ID.
 * @return
 *   A fully-loaded role object if a role with the given name or ID
 *   exists, FALSE otherwise.
 */
function og_user_role_load($rid) {
  return db_select('og_role', 'r')
    ->fields('r')
    ->condition('rid', $rid)
    ->execute()
    ->fetchObject();
}
/**
 * Save a user role to the database.
 *
 * @param $role
 *   A role object to modify or add. If $role->rid is not specified, a new
 *   role will be created.
 * @return
 *   Status constant indicating if role was created or updated.
 *   Failure to write the user role record will return FALSE. Otherwise.
 *   SAVED_NEW or SAVED_UPDATED is returned depending on the operation
 *   performed.
 */
function og_user_role_save($role) {
  if ($role->name) {
    // Prevent leading and trailing spaces in role names.
    $role->name = trim($role->name);
  }
  if (!empty($role->rid) && $role->name) {
    $status = drupal_write_record('og_role', $role, 'rid');
    module_invoke_all('og_user_role_update', $role);
  }
  else {
    $status = drupal_write_record('og_role', $role);
    module_invoke_all('og_user_role_insert', $role);
  }

  // Clear the user access cache.
  drupal_static_reset('og_user_access');
  drupal_static_reset('og_user_role_permissions');

  return $status;
}

/**
 * Delete a user role from database.
 *
 * @param $role
 *   An integer with the role ID.
 */
function og_user_role_delete($rid) {
  // Don't allow deleting anonymous/ authenticated global roles.
  if ($rid > OG_AUTHENTICATED_RID) {
    $role = og_user_role_load($rid);

    db_delete('og_role')
      ->condition('rid', $rid)
      ->execute();
    db_delete('og_role_permission')
      ->condition('rid', $rid)
      ->execute();
    // Update the users who have this role set.
    db_delete('og_users_roles')
      ->condition('rid', $rid)
      ->execute();

    module_invoke_all('og_user_role_delete', $role);

    // Clear the user access cache.
    drupal_static_reset('og_user_access');
    drupal_static_reset('og_user_role_permissions');
  }
}

/**
 * Delete all roles belonging to a group.
 *
 * @param $gid
 *   The group ID.
 */
function og_group_delete_user_roles($gid) {
  if ($roles = og_user_roles($gid, NULL, TRUE)) {
    foreach ($roles as $rid => $name) {
      og_user_role_delete($rid);
    }
  }
}

/**
 * Create new roles, based on the default roles and permissions.
 *
 * @param $gid
 *   The group ID.
 * @param $revert
 *   Optional; If TRUE and group should roles and permissions should be reverted
 *   then delete the overriden roles. Defaults to TRUE.
 * @return
 *   The newly created roles keyed by role ID and role name as the value. Or
 *   FALSE if no roles were created.
 */
function og_group_user_roles_override($gid, $revert = FALSE) {
  $rids = FALSE;
  if(!og_is_group_default_access($gid) && !((bool) db_query_range('SELECT 1 FROM {og_role} WHERE gid = :gid', 0, 1, array(':gid' => $gid))->fetchField())) {
    // Make sure roles doesn't exist already by looking for a row with the group
    // ID in {og_role} table.
    $perms = og_get_global_permissions();

    $rids = array();
    foreach (og_get_global_roles() as $rid => $name) {
      $role = new stdClass;
      $role->name = $name;
      $role->gid = $gid;

      og_user_role_save($role);
      $rids[$role->rid] = $role->name;
      og_user_role_change_permissions($role->rid, $perms[$rid]);
    }
  }
  elseif ($revert) {
    // Delete overriden roles and permissions.
    og_group_delete_user_roles($gid);
  }

  return $rids;
}

/**
 * Determine the modules that permissions belong to.
 *
 * @return
 *   An associative array in the format $permission => $module.
 */
function og_user_permission_get_modules() {
  $permissions = array();
  foreach (module_implements('og_permission') as $module) {
    $perms = module_invoke($module, 'og_permission');
    foreach ($perms as $key => $value) {
      $permissions[$key] = $module;
    }
  }
  return $permissions;
}

/**
 * Grant a group role to a user.
 *
 * @param $uid
 *   The user ID.
 * @param $rid
 *   The role ID.
 */
function og_users_roles_grant($gid, $uid, $rid) {
  // Get the existiong user roles.
  $user_roles = og_get_user_roles($gid, $uid);
  if (!in_array($rid, $user_roles)) {
    $role = new stdClass();
    $role->uid = $uid;
    $role->rid = $rid;
    $role->gid = $gid;

    drupal_write_record('og_users_roles', $role);
    module_invoke_all('og_users_roles_grant', $gid, $uid, $rid);
  }
}

/**
 * Revoke a group role from a user.
 *
 * @param $uid
 *   The user ID.
 * @param $rid
 *   The role ID.
 */
function og_users_roles_revoke($gid, $uid, $rid) {
  // Get the existiong user roles.
  $user_roles = og_get_user_roles($gid, $uid);
  if (in_array($rid, $user_roles)) {

    db_delete('og_users_roles')
      ->condition('uid', $uid)
      ->condition('rid', $rid)
      ->execute();
    module_invoke_all('og_users_roles_revoke', $gid, $uid, $rid);
  }
}

/**
 * Change permissions for a user role.
 *
 * This function may be used to grant and revoke multiple permissions at once.
 * For example, when a form exposes checkboxes to configure permissions for a
 * role, the submitted values may be directly passed on in a form submit
 * handler.
 *
 * @param $rid
 *   The ID of a user role to alter.
 * @param $permissions
 *   An array of permissions, where the key holds the permission name and the
 *   value is an integer or boolean that determines whether to grant or revoke
 *   the permission:
 *   @code
 *     array(
 *       'administer nodes' => 0,
 *       'access user profiles' => 1,
 *     )
 *   @endcode
 *   Existing permissions are not changed, unless specified in $permissions.
 *
 * @see og_user_role_grant_permissions()
 * @see og_user_role_revoke_permissions()
 */
function og_user_role_change_permissions($rid, array $permissions = array()) {
  // Grant new permissions for the role.
  $grant = array_filter($permissions);
  if (!empty($grant)) {
    og_user_role_grant_permissions($rid, array_keys($grant));
  }
  // Revoke permissions for the role.
  $revoke = array_diff_assoc($permissions, $grant);
  if (!empty($revoke)) {
    og_user_role_revoke_permissions($rid, array_keys($revoke));
  }
}

/**
 * Grant permissions to a user role.
 *
 * @param $rid
 *   The ID of a user role to alter.
 * @param $permissions
 *   A list of permission names to grant.
 *
 * @see user_role_change_permissions()
 * @see user_role_revoke_permissions()
 */
function og_user_role_grant_permissions($rid, array $permissions = array()) {
  $modules = og_user_permission_get_modules();
	// Grant new permissions for the role.
  foreach ($permissions as $name) {
    db_merge('og_role_permission')
      ->key(array(
        'rid' => $rid,
        'permission' => $name,
        'module' => $modules[$name],
      ))
      ->execute();
  }

  // Clear the user access cache.
  drupal_static_reset('og_user_access');
  drupal_static_reset('og_user_role_permissions');
}

/**
 * Revoke permissions from a user role.
 *
 * @param $rid
 *   The ID of a user role to alter.
 * @param $permissions
 *   A list of permission names to revoke.
 *
 * @see user_role_change_permissions()
 * @see user_role_grant_permissions()
 */
function og_user_role_revoke_permissions($rid, array $permissions = array()) {
  // Revoke permissions for the role.
  db_delete('og_role_permission')
    ->condition('rid', $rid)
    ->condition('permission', $permissions, 'IN')
    ->execute();

  // Clear the user access cache.
  drupal_static_reset('og_user_access');
  drupal_static_reset('og_user_role_permissions');
}


/**
 * Get all permissions defined for organic groups.
 */
function og_get_permissions() {
  $perms = &drupal_static(__FUNCTION__, array());
  if (!empty($perms)) {
    return $perms;
  }

  foreach (module_implements('og_permission') as $module) {
    if ($permissions = module_invoke($module, 'og_permission')) {
      foreach ($permissions as $key => $perm) {
        // Initialize the roles key, if other modules haven't set it explicetly.
        // This means the permissions can apply to anonymous and authenticaed
        // members as-well.
        $permissions[$key] += array('roles' => array(OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE));
      }
      $perms[$module] = $permissions;
    }
  }

  if (user_access('administer organic groups')) {
    $return = array();
    // Allow user to define which administration permissions a group admin can
    // set.
    foreach ($perms as $module => $permissions) {
      foreach ($permissions as $key => $perm) {
        $return['administer']['show ' . $key] = array(
          'title' => t('Show %perm', array('%perm' => strtolower($perm['title']))),
          'description' => t("Allow setting the %perm permission in the group permissions page.", array('%perm' => strtolower($perm['title']))),
          // Add all roles, as this option allows setting which permisisons
          // a role has access to.
          'roles' => array(OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE, OG_ADMINISTRATOR_ROLE),
        );
      }
    }
    $perms = $perms + $return;
  }
  return $perms;
}

/**
 * Get global permissions.
 *
 * @return
 *   Array keyed with the anonymous, authenticated and administror and the
 *   permissions that should be enabled by default.
 */
function og_get_global_permissions() {
  $roles = og_get_global_roles();

  $perms = og_user_role_permissions($roles);
  return $perms;
}

/**
 * Get all the modules fields that can be assigned to fieldable enteties.
 */
function og_get_fields() {
  $return = &drupal_static(__FUNCTION__, array());

  if (!empty($return)) {
    return $return;
  }

  foreach (module_implements('og_get_fields') as $module) {
    if ($fields = module_invoke($module, 'og_get_fields')) {
      foreach ($fields as $key => $field) {
        // Add the module information.
        $return[$key] = array_merge($field, array('module' => $module));
      }
    }
  }
  return $return;
}

/**
 * Update the permissions of all existing groups.
 *
 * @param $permissions
 *   The name of the permissions that need to be updated. Other permissions will
 *   not be affected by this operation.
 *
 * @return
 *   The number of groups that were updated.
 *
 */
function og_permissions_bulk_update($roles, $permissions) {
  // Handle only the permissions that were set to be bulk updated.
  $permissions = array_filter($permissions);

  // An array with the permissions that need to be set, keyed by the role name.
  $permissions_to_change = array();
  // Filter out only the needed permissions from the roles.
  foreach ($roles as $rid => $perms) {
    foreach ($perms as $perm => $value) {
      if (in_array($perm, $permissions)) {
        switch ($rid) {
          case 1:
            $role_name = OG_ANONYMOUS_ROLE;
            break;

          case 2:
            $role_name = OG_AUTHENTICATED_ROLE;
            break;

          case 3:
            $role_name = OG_ADMINISTRATOR_ROLE;
            break;
        }

        $permissions_to_change[$role_name][$perm] = $value;
      }
    }
  }

  // The number of groups that are bulk updated.
  $updated_groups = 0;

  if (!empty($permissions_to_change)) {
    // Get all existing group IDs.
    foreach (og_get_groups() as $entity_type => $values) {
      foreach ($values as $gid) {
        ++$updated_groups;
        $rids = og_get_group_default_roles($gid);
        foreach ($rids as $name => $rid) {
          og_user_role_change_permissions($rid, $permissions_to_change[$name]);
        }
      }
    }
  }
  return $updated_groups;
}

/**
 * Get a private token used to protect links from spoofing - CSRF.
 */
function og_get_token($gid) {
  return drupal_get_token($gid);
}

/**
 * Check to see if a token value matches the specified node.
 */
function og_check_token($token, $seed) {
  return drupal_get_token($seed) == $token;
}

function og_set_breadcrumb($entity_type, $eid, $path = array()) {
  if ($label = og_entity_get_label($entity_type, $eid)) {
    drupal_set_breadcrumb(array_merge(array(l(t('Home'), '<front>')), array(l($label, "$entity_type/$eid")), $path)) ;
  }
}

/**
 * Create a field in a bundle.
 *
 * @param $field_name
 *   The field name
 * @param $entity_type
 *   The entity type
 * @param $bundle
 *   The bundle name.
 */
function og_create_field($field_name, $entity_type, $bundle) {
  $og_field = og_get_fields($field_name);

  if (!empty($og_field['callback'])) {
    // Field has own implementation for creating the fields.
    call_user_func($og_field['callback'], $field_name, $entity_type, $bundle);
  }
  else {
    $field = field_info_field($field_name);
    if (empty($field)) {
      $field = field_create_field($og_field[$field_name]['field']);
    }

    $instance = field_info_instance($entity_type, $field_name, $bundle);
    if (empty($instance)) {

      $instance = array(
        'field_name' => $field_name,
        'bundle' => $bundle,
        'object_type' => $entity_type,
      ) + $og_field[$field_name]['instance'];

      field_create_instance($instance);
    }
  }
}


/**
 * Return a re-loaded entity with its fields.
 *
 * This is needed only if a user account is passed, as global $user is only a
 * partial user entity.
 *
 * @param $entity_type
 *   The entity type.
 * @param $entity
 *   The entity.
 */
function og_load_entity($entity_type, $entity) {
  if ($entity_type == 'user') {
    $entity = user_load($entity->uid);
  }
  return $entity;
}

/**
 * Return a loaded entity from group.
 *
 * @param $gid
 *   The group ID.
 */
function og_load_entity_from_group($gid) {
  $entity = FALSE;
  if ($group = og_load($gid)) {
    $entity = reset(entity_load($group->entity_type, array($group->eid)));
  }

  return $entity;

}