<?php
// $Id$

/**
 * Test the organic groups group CRUD handling.
 */
class OgGroupCrud extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Organic groups group CRUD',
      'description' => 'Test the create, update and remove of group entitys.',
      'group' => 'Organic groups',
    );
  }

  function setUp() {
    parent::setUp('entity', 'og');
    $this->web_user = $this->drupalCreateUser();
  }

  /**
   * Test CRUD of group entitys.
   */
  function testOgCrud() {
    $group = og_get_group(array('entity_type' => 'foo', 'eid' => 1), TRUE);

    // Assert is new property.
    $this->assertTrue($group->is_new, t('New group has "is new" property.'));

    // Assert default state.
    $this->assertTrue($group->state == OG_STATE_ACTIVE, t('Default state property is active.'));

    // Assert default creation time.
    $this->assertTrue($group->created, t('Group creating time was added to group.'));

    // Assert group ID not set.
    $this->assertTRUE(empty($group->gid), t('Group ID not set for unsaved group.'));

    // Save the group.
    $group = og_save($group);

    // Assert group ID was set.
    $this->assertTRUE(!empty($group->gid), t('Group ID was set for saved group.'));

    // Set a new state for the group.
    $group->state = OG_STATE_PENDING;

    $group = og_save($group);

    // Reload group to make sure state was updated.
    $group = og_get_group('foo', 1, FALSE, array(OG_STATE_PENDING));
    debug($group);
    $this->assertTRUE($group->state == OG_STATE_PENDING, t('Group was updated.'));

    // Assert group isn't loaded, when state is pending and state isn't
    // specifically stated.
    $group = og_get_group('foo', 1);

    debug($group);
    $this->assertFALSE($group, t('Pending state group was not loaded'));

/*    $groups = array(
      0 => array('entity_type' => 'node', 'eid' => 1),
      1 => array('entity_type' => 'node', 'eid' => 2, 'state' => OG_STATE_ACTIVE),
      2 => array('entity_type' => 'node', 'eid' => 3, 'state' => OG_STATE_PENDING),
      3 => array('entity_type' => 'node', 'eid' => 4, 'state' => OG_STATE_ACTIVE, 'data' => array('dummy_key' => 'dummy_value')),
      4 => array('entity_type' => 'user', 'eid' => 1),
    );

    foreach ($group as $group)
    $this->createGroups();

    // Get all group IDs.
    $groups = og_get_groups('gid', array(), array(OG_STATE_ACTIVE, OG_STATE_PENDING));
    $this->assertTrue(count($groups['node']) + count($groups['user']) == 5, t('All groups were created.'));

    // Get groups with different selection criteria.
    $groups = og_get_groups('node', array());
    $this->assertTrue(count($groups['node']) == 3, t('All active node groups were found.'));

    $groups = og_get_groups('node', array(), array(OG_STATE_PENDING));
    $this->assertTrue(count($groups['node']) == 1, t('All pending node groups were found.'));

    $groups = og_get_groups('user', array());
    $this->assertTrue(count($groups['user']) == 1, t('User group was found.'));

    // Get a single group entity.
    $group = og_get_group('node', 4);

    // Test the group has all the expected keys.
    foreach (array('entity_type', 'eid', 'state', 'data') as $key) {
      $this->assertTrue(!empty($group->{$key}), t('Group @key key found.', array('@key' => $key)));
    }

    // Delete a group by group ID.
    og_delete_groups('gid', array(1));
    $this->assertFalse(og_get_group('gid', 1), t('Deleted group entity by group ID.'));

    // Delete a group by entity type and entity ID.
    og_delete_groups('user', array(1));
    $this->assertFalse(og_get_group('user', 1), t('Deleted group entity by entity type and entity ID.'));

    // Delete all group by entity type.
    og_delete_groups('node');
    $this->assertFalse(og_get_groups('node'), t('Deleted group entity by entity type.'));*/
  }

  /**
   * Test association of group entitys.
   */
  function __testOgAssociation() {
    $groups = $this->createGroups();

    $web_user = $this->web_user;

    // Subscribe user to all groups.
    og_subscribe_user($groups, $web_user);
    $user_groups = og_get_entity_groups('user', $web_user, array(OG_STATE_ACTIVE, OG_STATE_PENDING));


    $this->assertEqual($user_groups, drupal_map_assoc(array_keys($groups)), t('User was subscribed to all groups.'));

    // Replace groups subscription with a new one.
    $new_groups = array($groups[1]['gid'] => $groups[1], $groups[2]['gid'] => $groups[2]);
    og_subscribe_user($new_groups, $web_user, TRUE);
    $user_groups = og_get_entity_groups('user', $web_user);

    $this->assertEqual($user_groups, drupal_map_assoc(array_keys($new_groups)), t('User subscription was replaced with new groups.'));

    // Add another group with pending state.
    og_subscribe_user(array($groups[3]), $web_user);
    $user_groups = og_get_entity_groups('user', $web_user);

    $this->assertTrue(count($user_groups) == 2, t('Get entity groups returned only active groups of the user.'));

    $user_groups = og_get_entity_groups('user', $web_user, array(OG_STATE_ACTIVE, OG_STATE_PENDING));
    $this->assertTrue(count($user_groups) == 3, t('Get entity groups returned all active and pending groups of the user.'));

    // Unsubscribe user from last group.
    og_unsubscribe_user(array($groups[3]['gid']), $web_user);
    $user_groups = og_get_entity_groups('user', $web_user, array(OG_STATE_ACTIVE, OG_STATE_PENDING));
    $this->assertTrue(count($user_groups) == 2, t('User was unsubscribed from group.'));
  }

  /**
   * Helper function to create groups.
   *
   * @return
   *   The group entitys cast to array.
   */
  function createGroup($values = array()) {
    $group = og_create_group($values);
    $group = og_save($group);

    return $group;
  }
}

/**
 * Test the organic groups content handeling.
 */
class OgTypeTest extends DrupalWebTestCase {

  public static function __getInfo() {
    return array(
      'name' => 'Organic groups content types',
      'description' => 'Test the organic groups group node and group content creation.',
      'group' => 'Organic groups',
    );
  }

  function setUp() {
    parent::setUp('og');
  }


  function __testOgType() {
    $admin_user = $this->drupalCreateUser(array('bypass node access', 'administer content types'));
    $this->drupalLogin($admin_user);

    $this->drupalGet('admin/structure/types/add');

    // Assert OG default types exist.
    $this->assertText(t('Group node'), t('Group node option was found.'));
    $this->assertText(t('group content'), t('group content option was found.'));

    // Create group content type.
    $group = $this->drupalCreateContentType(array(), array('og_group_type' => 'group'));

    // Create post content type.
    $group_content = $this->drupalCreateContentType(array(), array('og_group_content_type' => 'group content'));

    $this->assertTrue(og_is_group_content_type($group_content->type), t('Content type is group content.'));

    // Assert group content fields were added to the content type.
    $this->drupalGet('node/add/' . $group_content->type);
    $this->assertText(t('Groups audience'), t('Groups audience field was found.'));
  }
}

class OgUserPermissionsTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Organic groups role permissions',
      'description' => 'Verify that role permissions can be added and removed via API.',
      'group' => 'Organic groups'
    );
  }

  function setUp() {
    parent::setUp('og');

    $this->admin_user = $this->drupalCreateUser(array('bypass node access', 'administer content types'));
    $this->drupalLogin($this->admin_user);

    // Create group content type.
    $group_type = $this->drupalCreateContentType();
    $this->group_type = $group_type->type;

    // Add og_group field.
    og_create_field('og_group', 'node', $this->group_type);

    $node = $this->drupalCreateNode(array('type' => $group_type->type, 'og_group' => array(LANGUAGE_NONE => array(0 => array('value' =>TRUE)))));
    $this->group = og_get_group('node', $node->nid);
  }


  /**
   * Verify proper permission changes by og_user_role_change_permissions().
   */
  function testOgUserRoleChangePermissions() {
    $account = $this->drupalCreateUser();
    $gid = $this->group->gid;

    // Associate the user to the group.
    og_subscribe_user(array(array('gid' => $gid)), $account);

    // Verify current permissions.
    $this->assertTrue(og_user_access($gid, 'update own group content', $account), t('User has "update own group content" permission.'));
    $this->assertTrue(og_user_access($gid, 'delete own group content', $account), t('User has "delete own group content" permission.'));
    $this->assertFalse(og_user_access($gid, 'administer group', $account), t('User does not have "administer group" permission.'));

    // Change permissions to authenticated member.
    $roles = og_get_group_default_roles($gid);
    // Anonymous role ID.
    $rid = $roles[OG_AUTHENTICATED_ROLE];

    $permissions = array(
      'delete own group content' => 0,
      'administer group' => 1,
    );
    og_user_role_change_permissions($rid, $permissions);

    // Verify proper permission changes.
    $this->assertTrue(og_user_access($gid, 'update own group content', $account), t('User still has "update own group content" permission.'));
    $this->assertFalse(og_user_access($gid, 'delete own group content', $account), t('User no longer has "delete own group content" permission.'));
    $this->assertTrue(og_user_access($gid, 'administer group', $account), t('User now has "administer group" permission.'));
  }
}
