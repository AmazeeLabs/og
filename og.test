<?php
// $Id$

/**
 * Test the organic groups content handeling.
 */
class OgGroupCrud extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Organic groups group CRUD',
      'description' => 'Test the create, update and remove of group objects.',
      'group' => 'Organic groups',
    );
  }

  function setUp() {
    parent::setUp('og');
  }

  /**
   * Test CRUD of group objects.
   */
  function testOgCrud() {
    $groups = array(
      0 => array('obj_type' => 'node', 'oid' => 1),
      1 => array('obj_type' => 'node', 'oid' => 2, 'state' => OG_STATE_ACTIVE),
      2 => array('obj_type' => 'node', 'oid' => 3, 'state' => OG_STATE_PENDING),
      3 => array('obj_type' => 'node', 'oid' => 4, 'state' => OG_STATE_ACTIVE, 'data' => array('dummy_key' => 'dummy_value')),
      4 => array('obj_type' => 'user', 'oid' => 1),
    );

    foreach ($groups as $group) {
      // Initialize group array.
      $group += array('state' => OG_STATE_ACTIVE, 'data' => array());
      // Set a new group.
      og_set_group($group['obj_type'], $group['oid'], $group['state'], $group['data']);
    }

    // Get all group IDs.
    $groups = og_get_groups('gid', array(), array(OG_STATE_ACTIVE, OG_STATE_PENDING));
    $this->assertTrue(count($groups['node']) + count($groups['user']) == 5, t('All groups were created.'));

    // Get groups with different selection criteria.
    $groups = og_get_groups('node', array());
    $this->assertTrue(count($groups['node']) == 3, t('All active node groups were found.'));

    $groups = og_get_groups('node', array(), array(OG_STATE_PENDING));
    $this->assertTrue(count($groups['node']) == 1, t('All pending node groups were found.'));

    $groups = og_get_groups('user', array());
    $this->assertTrue(count($groups['user']) == 1, t('User group was found.'));

    // Get a single group object.
    $group = og_get_group('node', 4);

    // Test the group has all the expected keys.
    foreach (array('obj_type', 'oid', 'state', 'data') as $key) {
      $this->assertTrue(!empty($group->{$key}), t('Group @key key found.', array('@key' => $key)));
    }

    // Test the data values exist.
    $this->assertTrue($group->data['dummy_key'] == 'dummy_value', t('Group object data values found.'));
  }
}

/**
 * Test the organic groups content handeling.
 */
class OgTypeTest extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Organic groups content types',
      'description' => 'Test the organic groups group node and group content creation.',
      'group' => 'Organic groups',
    );
  }

  function setUp() {
    parent::setUp('og');
  }


  function __testOgType() {
    $admin_user = $this->drupalCreateUser(array('bypass node access', 'administer content types'));
    $this->drupalLogin($admin_user);

    $this->drupalGet('admin/structure/types/add');

    // Assert OG default types exist.
    $this->assertText(t('Group node'), t('Group node option was found.'));
    $this->assertText(t('group content'), t('group content option was found.'));

    // Create group content type.
    $group = $this->drupalCreateContentType(array(), array('og_group_type' => 'group'));

    // Create post content type.
    $group_content = $this->drupalCreateContentType(array(), array('og_group_content_type' => 'group content'));

    $this->assertTrue(og_is_group_content_type($group_content->type), t('Content type is group content.'));

    // Assert group content fields were added to the content type.
    $this->drupalGet('node/add/' . $group_content->type);
    $this->assertText(t('Groups audience'), t('Groups audience field was found.'));
  }
}

class OgUserPermissionsTestCase extends DrupalWebTestCase {
  protected $admin_user;
  protected $rid;

  public static function getInfo() {
    return array(
      'name' => 'Organic groups role permissions',
      'description' => 'Verify that role permissions can be added and removed via the permissions page of the group.',
      'group' => 'Organic groups'
    );
  }

  function setUp() {
    parent::setUp('og');


    $this->admin_user = $this->drupalCreateUser(array('bypass node access', 'administer content types'));
    $this->drupalLogin($this->admin_user);

    // Create group content type.
    $group_type = $this->drupalCreateContentType(array('og_content_type_usage' => 'group'));
    $this->group_type= $group_type->type;

    $group = $this->drupalCreateNode(array('type' => $group_type->type));
    $this->group_nid = $group->nid;
  }

  /**
   * Change user permissions and check og_user_access().
   */
  function __testOgUserPermissionChanges() {
    $account = $this->drupalCreateUser(array('bypass node access', 'administer content types'));
    $this->drupalLogin($account);

    // Get the role ID of the anonymous user.
    $roles = og_get_group_default_roles($this->group_nid);

    // Add a permission.
    $this->assertFalse(og_user_access($this->group_nid, 'unsubscribe', $account), t('User does not have "Unsubscribe user from group" permission.'));
    $edit = array();
    $edit[$roles[OG_ANONYMOUS_ROLE] . '[unsubscribe]'] = TRUE;
    $this->drupalPost('og/' . $this->group_nid . '/admin/people/permissions', $edit, t('Save permissions'));
    $this->assertText(t('The changes have been saved.'), t('Successful save message displayed.'));
    $this->assertTrue(og_user_access($this->group_nid, 'unsubscribe', $account), t('User now has "Unsubscribe user from group" permission.'));

    // Remove a permission.
    $edit = array();
    $edit[$rid . '[unsubscribe]'] = FALSE;
    $this->drupalPost('og/' . $this->group_nid . '/admin/people/permissions', $edit, t('Save permissions'));
    $this->assertFalse(og_user_access($this->group_nid, 'unsubscribe', $account), t('User no longer has "Unsubscribe user from group" permission.'));
  }


  /**
   * Verify proper permission changes by og_user_role_change_permissions().
   */
  function __testOgUserRoleChangePermissions() {
    $rid = $this->rid;
    $account = $this->admin_user;

    // Verify current permissions.
    $this->assertFalse(user_access('administer nodes', $account), t('User does not have "administer nodes" permission.'));
    $this->assertTrue(user_access('access user profiles', $account), t('User has "access user profiles" permission.'));
    $this->assertTrue(user_access('administer site configuration', $account), t('User has "administer site configuration" permission.'));

    // Change permissions.
    $permissions = array(
      'administer nodes' => 1,
      'access user profiles' => 0,
    );
    og_user_role_change_permissions($rid, $permissions);

    // Verify proper permission changes.
    $this->assertTrue(user_access('administer nodes', $account), t('User now has "administer nodes" permission.'));
    $this->assertFalse(user_access('access user profiles', $account), t('User no longer has "access user profiles" permission.'));
    $this->assertTrue(user_access('administer site configuration', $account), t('User still has "administer site configuration" permission.'));
  }
}
