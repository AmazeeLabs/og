<?php
// $Id$

/**
 * @file
 * Enable access control for private and public groups and group content.
 */

/**
 * The access realm of group member.
 */
define('GROUP_ACCESS_AUTHENTICATED_REALM', 'group_access_authenticated');

/**
 * Group public access field.
 */
define('GROUP_ACCESS_FIELD', 'group_access');

/**
 * Group public access field.
 */
define('GROUP_CONTENT_ACCESS_FIELD', 'group_content_access');


/**
 * Implementation of hook_node_grants().
 */
function group_access_node_grants($account, $op) {
  $grants = array();
  if ($op == 'view') {
    foreach (group_get_entity_groups('user', $account) as $gid => $value) {
      $grants[GROUP_ACCESS_AUTHENTICATED_REALM][] = $gid;
    }
  }

  return $grants;
}


/**
 * Implementation of hook_node_access_records.
 */
function group_access_node_access_records($node) {
  $grants = array();

  $access = FALSE;

  $property = GROUP_CONTENT_ACCESS_FIELD;

  if (group_is_group_type('node', $node->type) && !group_access_group_is_public('node', $node) ||
    group_is_group_content_type('node', $node->type) && group_access_group_content_is_public('node', $node)) {
    // Group or group content that is explicitly set to be unpublic.
    $access = TRUE;
  }
  // Group content without access field.
  elseif (group_is_group_content_type('node', $node->type) && !isset($node->{$property})) {
    if ($field = field_info_field(GROUP_ACCESS_FIELD)) {

      // Access should be determined by its groups. If group content belongs to
      // several groups, and one of them is public, then the group content will be
      // public as-well.
      $gids = group_get_entity_groups('node', $node);

      $groups = group_load_multiple($gids);

      // Get all groups under their entity.
      $list = array();
      foreach ($groups as $group) {
        $list[$group->entity_type][$group->gid] = $group->gid;
      }

      foreach ($list as $entity_type => $entity_gids) {
        // Get the entity types ID.
        $conditions = array(
          array('group_access_value', 1),
          array('entity_id', $entity_gids),
          array('type', $entity_type),
        );

        $result = field_attach_query($field['id'], $conditions);

        // There are no public groups.
        if (empty($result)) {
          $access = TRUE;
        }
      }
    }
  }

  if ($access) {
    $grants[] = array (
      'realm' => GROUP_ACCESS_AUTHENTICATED_REALM,
      'gid' => $node->nid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
  }
  return $grants;
}

/**
 * Implement group_fields_info().
 */
function group_access_group_fields_info() {
  $items[GROUP_ACCESS_FIELD] = array(
    'type' => array('group'),
    'description' => t('Add organic groups access field to group types.'),
    'field' => array(
      'field_name' => GROUP_ACCESS_FIELD,
      'type' => 'list_boolean',
      'cardinality' => 1,
      'settings' => array('allowed_values' => implode("\r\n", array('0|Do not show to non group member', '1|Show to all site users')), 'allowed_values_function' => ''),
    ),
    'instance' => array(
      'label' => t('group visibility'),
      'required' => TRUE,
      // Make the group type default.
      'default_value' => array(0 => array('value' => 1)),
      'widget_type' => 'options_buttons',
      'display' => array(
        'full' => array(
          'label' => 'above',
          'type' => 'options_onoff',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'options_onoff',
        ),
      ),
    ),
  );

  $items[GROUP_CONTENT_ACCESS_FIELD] = array(
    'type' => array('group content'),
    'description' => t('Add organic groups access field to group-content types, that may override the group settings.'),
    'field' => array(
      'field_name' => GROUP_CONTENT_ACCESS_FIELD,
      'type' => 'list_boolean',
      'cardinality' => 1,
      'settings' => array('allowed_values' => implode("\r\n", array('0|Use group defaults', '1|Override group defaults')), 'allowed_values_function' => ''),
    ),
    'instance' => array(
      'label' => t('group content visibility'),
      'required' => TRUE,
      // Make the group type default.
      'default_value' => array(0 => array('value' => 0)),
      'widget_type' => 'options_buttons',
      'display' => array(
        'full' => array(
          'label' => 'above',
          'type' => 'options_onoff',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'options_onoff',
        ),
      ),
    ),
  );

  return $items;
}


/**
 * Check if an group is set as public.
 *
 * @param $entity_type
 *   The entity type (e.g. "node" or "user").
 * @param $entity
 *   The entity can be a user, node or any fieldable entity.
 * @return
 *  TRUE if the entity is private and should appear only to group members.
 */
function group_access_group_is_public($entity_type, $entity) {
  group_load_entity($entity_type, $entity);
  return !empty($entity->{GROUP_ACCESS_FIELD}[LANGUAGE_NONE][0]['gid']);
}

/**
 * Check if an group is set as public.
 *
 * @param $entity_type
 *   The entity type (e.g. "node" or "user").
 * @param $entity
 *   The entity can be a user, node or any fieldable entity.
 * @return
 *  TRUE if the entity is private and should appear only to group members.
 */
function group_access_group_content_is_public($entity_type, $entity) {
  group_load_entity($entity_type, $entity);
  return !empty($entity->{GROUP_CONTENT_ACCESS_FIELD}[LANGUAGE_NONE][0]['gid']);
}